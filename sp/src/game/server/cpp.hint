// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define BEGIN_DATADESC(className) datamap_t className::m_DataMap = { 0, 0, #className, NULL }; datamap_t *className::GetDataDescMap( void ) { return &m_DataMap; } datamap_t *className::GetBaseMap() { datamap_t *pResult; DataMapAccess((BaseClass *)NULL, &pResult); return pResult; } BEGIN_DATADESC_GUTS( className )
#define END_DATADESC() }; if ( sizeof( dataDesc ) > sizeof( dataDesc[0] ) ) { classNameTypedef::m_DataMap.dataNumFields = SIZE_OF_ARRAY( dataDesc ) - 1; classNameTypedef::m_DataMap.dataDesc = &dataDesc[1]; } else { classNameTypedef::m_DataMap.dataNumFields = 1; classNameTypedef::m_DataMap.dataDesc = dataDesc; } return &classNameTypedef::m_DataMap; }
#define AI_BEGIN_CUSTOM_NPC(className, derivedClass) IMPLEMENT_CUSTOM_AI(className, derivedClass ) void derivedClass::InitCustomSchedules( void ) { typedef derivedClass CNpc; const char *pszClassName = #derivedClass; CUtlVector<const char *> schedulesToLoad; CUtlVector<AIScheduleLoadFunc_t> reqiredOthers; CAI_NamespaceInfos scheduleIds; CAI_NamespaceInfos taskIds; CAI_NamespaceInfos conditionIds; CAI_NamespaceInfos squadSlotIds;
#define AI_END_CUSTOM_NPC() }